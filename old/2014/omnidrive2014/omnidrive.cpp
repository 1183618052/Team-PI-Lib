/*
    omnidrive - Library for omnidirectional movement.

    Includes linear acceleration profile to prevent motor slippage.
    Created by Brian Chen 05/01/2014
    Last Modified by Brian Chen 12/08/2014 7:21:09 PM

    Alpha 1.0
*/


#include "Arduino.h"
#include "pwmMotor.h"
#include "omnidrive.h"

/* macros for getting the max of three numbers */
#define MAXIMUM(a, b, c) ((a>b)?((a>c)?a:c):((b>c)?b:c))
#define MINIMUM(a, b, c) ((a<b)?((a<c)?a:c):((b<c)?b:c))

int16_t lookup[][3] = {
    { 255,   0,-255}, 
    { 250,   5,-255}, 
    { 245,  10,-255}, 
    { 240,  15,-255}, 
    { 235,  20,-255}, 
    { 230,  25,-255}, 
    { 226,  29,-255}, 
    { 221,  34,-255}, 
    { 217,  38,-255}, 
    { 212,  43,-255}, 
    { 208,  47,-255}, 
    { 204,  51,-255}, 
    { 199,  56,-255}, 
    { 195,  60,-255}, 
    { 191,  64,-255}, 
    { 187,  68,-255}, 
    { 183,  72,-255}, 
    { 178,  77,-255}, 
    { 174,  81,-255}, 
    { 170,  85,-255}, 
    { 166,  89,-255}, 
    { 162,  93,-255}, 
    { 159,  96,-255}, 
    { 155, 100,-255}, 
    { 151, 104,-255}, 
    { 147, 108,-255}, 
    { 143, 112,-255}, 
    { 139, 116,-255}, 
    { 135, 120,-255}, 
    { 131, 124,-255}, 
    { 127, 128,-255}, 
    { 124, 131,-255}, 
    { 120, 135,-255}, 
    { 116, 139,-255}, 
    { 112, 143,-255}, 
    { 108, 147,-255}, 
    { 104, 151,-255}, 
    { 100, 155,-255}, 
    {  96, 159,-255}, 
    {  93, 162,-255}, 
    {  89, 166,-255}, 
    {  85, 170,-255}, 
    {  81, 174,-255}, 
    {  77, 178,-255}, 
    {  72, 183,-255}, 
    {  68, 187,-255}, 
    {  64, 191,-255}, 
    {  60, 195,-255}, 
    {  56, 199,-255}, 
    {  51, 204,-255}, 
    {  47, 208,-255}, 
    {  43, 212,-255}, 
    {  38, 217,-255}, 
    {  34, 221,-255}, 
    {  29, 226,-255}, 
    {  25, 230,-255}, 
    {  20, 235,-255}, 
    {  15, 240,-255}, 
    {  10, 245,-255}, 
    {   5, 250,-255}, 
    {   0, 255,-255}, 
    {  -5, 255,-250}, 
    { -10, 255,-245}, 
    { -15, 255,-240}, 
    { -20, 255,-235}, 
    { -25, 255,-230}, 
    { -29, 255,-226}, 
    { -34, 255,-221}, 
    { -38, 255,-217}, 
    { -43, 255,-212}, 
    { -47, 255,-208}, 
    { -51, 255,-204}, 
    { -56, 255,-199}, 
    { -60, 255,-195}, 
    { -64, 255,-191}, 
    { -68, 255,-187}, 
    { -72, 255,-183}, 
    { -77, 255,-178}, 
    { -81, 255,-174}, 
    { -85, 255,-170}, 
    { -89, 255,-166}, 
    { -93, 255,-162}, 
    { -96, 255,-159}, 
    {-100, 255,-155}, 
    {-104, 255,-151}, 
    {-108, 255,-147}, 
    {-112, 255,-143}, 
    {-116, 255,-139}, 
    {-120, 255,-135}, 
    {-124, 255,-131}, 
    {-127, 255,-127}, 
    {-131, 255,-124}, 
    {-135, 255,-120}, 
    {-139, 255,-116}, 
    {-143, 255,-112}, 
    {-147, 255,-108}, 
    {-151, 255,-104}, 
    {-155, 255,-100}, 
    {-159, 255, -96}, 
    {-162, 255, -93}, 
    {-166, 255, -89}, 
    {-170, 255, -85}, 
    {-174, 255, -81}, 
    {-178, 255, -77}, 
    {-183, 255, -72}, 
    {-187, 255, -68}, 
    {-191, 255, -64}, 
    {-195, 255, -60}, 
    {-199, 255, -56}, 
    {-204, 255, -51}, 
    {-208, 255, -47}, 
    {-212, 255, -43}, 
    {-217, 255, -38}, 
    {-221, 255, -34}, 
    {-226, 255, -29}, 
    {-230, 255, -25}, 
    {-235, 255, -20}, 
    {-240, 255, -15}, 
    {-245, 255, -10}, 
    {-250, 255,  -5}, 
    {-255, 255,   0}, 
    {-255, 250,   5}, 
    {-255, 245,  10}, 
    {-255, 240,  15}, 
    {-255, 235,  20}, 
    {-255, 230,  25}, 
    {-255, 226,  29}, 
    {-255, 221,  34}, 
    {-255, 217,  38}, 
    {-255, 212,  43}, 
    {-255, 208,  47}, 
    {-255, 204,  51}, 
    {-255, 199,  56}, 
    {-255, 195,  60}, 
    {-255, 191,  64}, 
    {-255, 187,  68}, 
    {-255, 183,  72}, 
    {-255, 178,  77}, 
    {-255, 174,  81}, 
    {-255, 170,  85}, 
    {-255, 166,  89}, 
    {-255, 162,  93}, 
    {-255, 159,  96}, 
    {-255, 155, 100}, 
    {-255, 151, 104}, 
    {-255, 147, 108}, 
    {-255, 143, 112}, 
    {-255, 139, 116}, 
    {-255, 135, 120}, 
    {-255, 131, 124}, 
    {-255, 128, 127}, 
    {-255, 124, 131}, 
    {-255, 120, 135}, 
    {-255, 116, 139}, 
    {-255, 112, 143}, 
    {-255, 108, 147}, 
    {-255, 104, 151}, 
    {-255, 100, 155}, 
    {-255,  96, 159}, 
    {-255,  93, 162}, 
    {-255,  89, 166}, 
    {-255,  85, 170}, 
    {-255,  81, 174}, 
    {-255,  77, 178}, 
    {-255,  72, 183}, 
    {-255,  68, 187}, 
    {-255,  64, 191}, 
    {-255,  60, 195}, 
    {-255,  56, 199}, 
    {-255,  51, 204}, 
    {-255,  47, 208}, 
    {-255,  43, 212}, 
    {-255,  38, 217}, 
    {-255,  34, 221}, 
    {-255,  29, 226}, 
    {-255,  25, 230}, 
    {-255,  20, 235}, 
    {-255,  15, 240}, 
    {-255,  10, 245}, 
    {-255,   5, 250}, 
    {-255,   0, 255}, 
    {-250,  -5, 255}, 
    {-245, -10, 255}, 
    {-240, -15, 255}, 
    {-235, -20, 255}, 
    {-230, -25, 255}, 
    {-226, -29, 255}, 
    {-221, -34, 255}, 
    {-217, -38, 255}, 
    {-212, -43, 255}, 
    {-208, -47, 255}, 
    {-204, -51, 255}, 
    {-199, -56, 255}, 
    {-195, -60, 255}, 
    {-191, -64, 255}, 
    {-187, -68, 255}, 
    {-183, -72, 255}, 
    {-178, -77, 255}, 
    {-174, -81, 255}, 
    {-170, -85, 255}, 
    {-166, -89, 255}, 
    {-162, -93, 255}, 
    {-159, -96, 255}, 
    {-155,-100, 255}, 
    {-151,-104, 255}, 
    {-147,-108, 255}, 
    {-143,-112, 255}, 
    {-139,-116, 255}, 
    {-135,-120, 255}, 
    {-131,-124, 255}, 
    {-127,-128, 255}, 
    {-124,-131, 255}, 
    {-120,-135, 255}, 
    {-116,-139, 255}, 
    {-112,-143, 255}, 
    {-108,-147, 255}, 
    {-104,-151, 255}, 
    {-100,-155, 255}, 
    { -96,-159, 255}, 
    { -93,-162, 255}, 
    { -89,-166, 255}, 
    { -85,-170, 255}, 
    { -81,-174, 255}, 
    { -77,-178, 255}, 
    { -72,-183, 255}, 
    { -68,-187, 255}, 
    { -64,-191, 255}, 
    { -60,-195, 255}, 
    { -56,-199, 255}, 
    { -51,-204, 255}, 
    { -47,-208, 255}, 
    { -43,-212, 255}, 
    { -38,-217, 255}, 
    { -34,-221, 255}, 
    { -29,-226, 255}, 
    { -25,-230, 255}, 
    { -20,-235, 255}, 
    { -15,-240, 255}, 
    { -10,-245, 255}, 
    {  -5,-250, 255}, 
    {   0,-255, 255}, 
    {   5,-255, 250}, 
    {  10,-255, 245}, 
    {  15,-255, 240}, 
    {  20,-255, 235}, 
    {  25,-255, 230}, 
    {  29,-255, 226}, 
    {  34,-255, 221}, 
    {  38,-255, 217}, 
    {  43,-255, 212}, 
    {  47,-255, 208}, 
    {  51,-255, 204}, 
    {  56,-255, 199}, 
    {  60,-255, 195}, 
    {  64,-255, 191}, 
    {  68,-255, 187}, 
    {  72,-255, 183}, 
    {  77,-255, 178}, 
    {  81,-255, 174}, 
    {  85,-255, 170}, 
    {  89,-255, 166}, 
    {  93,-255, 162}, 
    {  96,-255, 159}, 
    { 100,-255, 155}, 
    { 104,-255, 151}, 
    { 108,-255, 147}, 
    { 112,-255, 143}, 
    { 116,-255, 139}, 
    { 120,-255, 135}, 
    { 124,-255, 131}, 
    { 127,-255, 127}, 
    { 131,-255, 124}, 
    { 135,-255, 120}, 
    { 139,-255, 116}, 
    { 143,-255, 112}, 
    { 147,-255, 108}, 
    { 151,-255, 104}, 
    { 155,-255, 100}, 
    { 159,-255,  96}, 
    { 162,-255,  93}, 
    { 166,-255,  89}, 
    { 170,-255,  85}, 
    { 174,-255,  81}, 
    { 178,-255,  77}, 
    { 183,-255,  72}, 
    { 187,-255,  68}, 
    { 191,-255,  64}, 
    { 195,-255,  60}, 
    { 199,-255,  56}, 
    { 204,-255,  51}, 
    { 208,-255,  47}, 
    { 212,-255,  43}, 
    { 217,-255,  38}, 
    { 221,-255,  34}, 
    { 226,-255,  29}, 
    { 230,-255,  25}, 
    { 235,-255,  20}, 
    { 240,-255,  15}, 
    { 245,-255,  10}, 
    { 250,-255,   5}, 
    { 255,-255,   0}, 
    { 255,-250,  -5}, 
    { 255,-245, -10}, 
    { 255,-240, -15}, 
    { 255,-235, -20}, 
    { 255,-230, -25}, 
    { 255,-226, -29}, 
    { 255,-221, -34}, 
    { 255,-217, -38}, 
    { 255,-212, -43}, 
    { 255,-208, -47}, 
    { 255,-204, -51}, 
    { 255,-199, -56}, 
    { 255,-195, -60}, 
    { 255,-191, -64}, 
    { 255,-187, -68}, 
    { 255,-183, -72}, 
    { 255,-178, -77}, 
    { 255,-174, -81}, 
    { 255,-170, -85}, 
    { 255,-166, -89}, 
    { 255,-162, -93}, 
    { 255,-159, -96}, 
    { 255,-155,-100}, 
    { 255,-151,-104}, 
    { 255,-147,-108}, 
    { 255,-143,-112}, 
    { 255,-139,-116}, 
    { 255,-135,-120}, 
    { 255,-131,-124}, 
    { 255,-127,-127}, 
    { 255,-124,-131}, 
    { 255,-120,-135}, 
    { 255,-116,-139}, 
    { 255,-112,-143}, 
    { 255,-108,-147}, 
    { 255,-104,-151}, 
    { 255,-100,-155}, 
    { 255, -96,-159}, 
    { 255, -93,-162}, 
    { 255, -89,-166}, 
    { 255, -85,-170}, 
    { 255, -81,-174}, 
    { 255, -77,-178}, 
    { 255, -72,-183}, 
    { 255, -68,-187}, 
    { 255, -64,-191}, 
    { 255, -60,-195}, 
    { 255, -56,-199}, 
    { 255, -51,-204}, 
    { 255, -47,-208}, 
    { 255, -43,-212}, 
    { 255, -38,-217}, 
    { 255, -34,-221}, 
    { 255, -29,-226}, 
    { 255, -25,-230}, 
    { 255, -20,-235}, 
    { 255, -15,-240}, 
    { 255, -10,-245}, 
    { 255,  -5,-250}
};//lookup array

OMNIDRIVE::OMNIDRIVE(PMOTOR &_motorA, PMOTOR &_motorB, PMOTOR &_motorC, PMOTOR &_motorD){
    motorA = &_motorA;
	motorB = &_motorB;
	motorC = &_motorC;
    motorD = &_motorD;
}

/*
move in a direction with angularVelocity, speed and angle input. An acceleration
profile is build into the function to prevent wheel slipping when rapidly changing
speed as experienced during testing.

The maths in this is simple, but confusing (an oxymoron really).
*/

int16_t OMNIDRIVE::move(int16_t angle, uint8_t speed, int16_t angularVelocity){
    unsigned long now = micros();
    unsigned long dt = 0;   //dt for acceleration profile

    float pA, pB, pC;   //actual motor speeds to be applied
    float target_pA, target_pB, target_pC;  //target motor speeds
    float k;    //scaling constant

    int16_t m = 256;

    if (lCallTime != 0){
        //if it's not the first call, lCallTime would have been initialised and so we
        //can calculate dt.
        dt = now - lCallTime;
    }
    lCallTime = now;    //set last call time to now as we won't use "now" anymore.

    //make sure angularVelocity is not > MAX
    if (angularVelocity > MAX){ angularVelocity = MAX; }
    if (angularVelocity < -MAX){ angularVelocity = -MAX; }

    //make sure speed is not >> MAX
    if (speed > MAX){ speed = MAX; }
    if (speed < -MAX){ speed = -MAX; }

    //get motor speeds from lookup array
    target_pA = float(lookup[angle][0] * speed / MAX);
    target_pB = float(lookup[angle][1] * speed / MAX);
    target_pC = float(lookup[angle][2] * speed / MAX);

    pA = target_pA;
    pB = target_pB;
    pC = target_pC;

    //set last motor powers to current
    lpA = pA;
    lpB = pB;
    lpC = pC;

    lTarget_pA = target_pA;
    lTarget_pB = target_pB;
    lTarget_pC = target_pC;

    /************************************************************************/


    /*************************************************************************
    ***** angularVelocity scaling ********************************************
    *************************************************************************/

    //scale speeds from angular velocity. Angular velocity must not be scalled as it is for PID control
    if (angularVelocity > 0){
        m = MAXIMUM(pA, pB, pC);  //get max of speeds

        if (m + angularVelocity > MAX){
            //scale down accordingly with som basic algebra
            k = (MAX - angularVelocity);
            pA = pA / m * k;
            pB = pB / m * k;
            pC = pC / m * k;
        }
    }
    else if (angularVelocity < 0){
        m = MINIMUM(pA, pB, pC);    //get min of speeds

        if (angularVelocity + m < -MAX){
            //scale down accordingly with some basic algebra
            k = (-MAX - angularVelocity);
            pA = pA * k / m;
            pB = pB * k / m;
            pC = pC * k / m;
        }
    }
    //after scalling, we can add angularVelocity and be sure that it's within the limits
    pA += angularVelocity;
    pB += angularVelocity;
    pC += angularVelocity;

    //make sure speeds will actually move the robot.
    if (pA < MOTOR_MIN_SPEED && pA > 0){ pA = MOTOR_MIN_SPEED; }
    if (pB < MOTOR_MIN_SPEED && pB > 0){ pB = MOTOR_MIN_SPEED; }
    if (pC < MOTOR_MIN_SPEED && pC > 0){ pC = MOTOR_MIN_SPEED; }

    if (pA > -MOTOR_MIN_SPEED && pA < 0){ pA = -MOTOR_MIN_SPEED; }
    if (pB > -MOTOR_MIN_SPEED && pB < 0){ pB = -MOTOR_MIN_SPEED; }
    if (pC > -MOTOR_MIN_SPEED && pC < 0){ pC = -MOTOR_MIN_SPEED; }

    //move motors
    (motorA)->move(pA);
    (motorB)->move(pB);
    (motorC)->move(pC);

    return (int16_t)speed * m / MAX;    //returns scaled speed possibly required for pid speed control
}